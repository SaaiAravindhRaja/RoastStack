import React, { useState } from 'react';
import { RoastResponse } from '../types/roast';

interface RoastResultProps {
  roast: RoastResponse;
  onNewRoast: () => void;
}

const RoastResult: React.FC<RoastResultProps> = ({ roast, onNewRoast }) => {
  const [copied, setCopied] = useState(false);

  const getModeEmoji = (mode: string) => {
    const emojis = {
      mild: '🧂',
      medium: '🌶️',
      savage: '🔥',
      grandma: '👵'
    };
    return emojis[mode as keyof typeof emojis] || '🌶️';
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-red-400';
    if (score >= 60) return 'text-orange-400';
    if (score >= 40) return 'text-yellow-400';
    return 'text-green-400';
  };

  const getScoreLabel = (score: number) => {
    if (score >= 90) return 'NUCLEAR ☢️';
    if (score >= 80) return 'SAVAGE 🔥';
    if (score >= 60) return 'SPICY 🌶️';
    if (score >= 40) return 'MILD 🧂';
    return 'GENTLE 🌱';
  };

  const handleCopyRoast = async () => {
    try {
      const textToCopy = `🔥 ROAST STACK VERDICT 🔥\n\nTech Stack: ${roast.techStack}\nRoast Mode: ${getModeEmoji(roast.roastMode)} ${roast.roastMode.toUpperCase()}\nSpice Level: ${roast.roastScore}/100\n\n${roast.roast}\n\n---\nGenerated by Roast Stack 💀`;
      
      await navigator.clipboard.writeText(textToCopy);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: 'My Tech Stack Got Roasted!',
        text: `Check out how my tech stack (${roast.techStack}) got absolutely destroyed! 🔥`,
        url: window.location.href,
      });
    } else {
      handleCopyRoast();
    }
  };

  return (
    <div className="max-w-3xl mx-auto">
      <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-2xl p-8 shadow-2xl border border-white border-opacity-20">
        {/* Header */}
        <div className="text-center mb-6">
          <h2 className="text-3xl font-bold text-white mb-2">
            🎯 VERDICT IS IN!
          </h2>
          <div className="flex items-center justify-center space-x-4 text-purple-200">
            <span className="bg-white bg-opacity-20 px-3 py-1 rounded-full text-sm">
              {getModeEmoji(roast.roastMode)} {roast.roastMode.toUpperCase()} MODE
            </span>
            <span className={`bg-white bg-opacity-20 px-3 py-1 rounded-full text-sm font-bold ${getScoreColor(roast.roastScore)}`}>
              {roast.roastScore}/100 {getScoreLabel(roast.roastScore)}
            </span>
          </div>
        </div>

        {/* Tech Stack */}
        <div className="mb-6 text-center">
          <p className="text-purple-200 text-sm mb-2">YOUR TECH STACK:</p>
          <p className="text-white font-semibold text-lg bg-white bg-opacity-10 rounded-lg px-4 py-2 inline-block">
            {roast.techStack}
          </p>
        </div>

        {/* Roast Content */}
        <div className="mb-8">
          <div className="bg-gradient-to-r from-orange-500 to-red-500 p-6 rounded-xl text-white shadow-lg">
            <div className="text-4xl mb-4 text-center">💀</div>
            <p className="text-lg leading-relaxed whitespace-pre-wrap font-medium">
              {roast.roast}
            </p>
            {roast.fallback && (
              <div className="mt-4 text-orange-200 text-sm text-center">
                ⚠️ Fallback roast (AI service unavailable)
              </div>
            )}
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <button
            onClick={onNewRoast}
            className="bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 shadow-lg"
          >
            🔄 Roast Another Stack
          </button>
          
          <button
            onClick={handleCopyRoast}
            className="bg-gradient-to-r from-green-500 to-teal-500 hover:from-green-600 hover:to-teal-600 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 shadow-lg"
          >
            {copied ? '✅ Copied!' : '📋 Copy Roast'}
          </button>
          
          <button
            onClick={handleShare}
            className="bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 shadow-lg"
          >
            📤 Share the Pain
          </button>
        </div>

        {/* Roast Score Breakdown */}
        <div className="mt-8 pt-6 border-t border-white border-opacity-20">
          <h3 className="text-white font-semibold mb-4 text-center">🔥 Spice Level Breakdown</h3>
          <div className="bg-white bg-opacity-10 rounded-lg p-4">
            <div className="flex items-center justify-between mb-2">
              <span className="text-purple-200">Roast Intensity</span>
              <span className={`font-bold ${getScoreColor(roast.roastScore)}`}>
                {roast.roastScore}/100
              </span>
            </div>
            <div className="w-full bg-white bg-opacity-20 rounded-full h-3">
              <div 
                className={`h-3 rounded-full transition-all duration-1000 ${
                  roast.roastScore >= 80 ? 'bg-gradient-to-r from-red-500 to-red-600' :
                  roast.roastScore >= 60 ? 'bg-gradient-to-r from-orange-500 to-red-500' :
                  roast.roastScore >= 40 ? 'bg-gradient-to-r from-yellow-500 to-orange-500' :
                  'bg-gradient-to-r from-green-500 to-yellow-500'
                }`}
                style={{ width: `${roast.roastScore}%` }}
              ></div>
            </div>
            <div className="text-center mt-2 text-purple-200 text-sm">
              {getScoreLabel(roast.roastScore)}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RoastResult;